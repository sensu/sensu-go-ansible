---
- name: Generate Cert Authority on localhost
  hosts: localhost
  connection: local
  gather_facts: false

  tasks:
    - name: Creates keys directory
      file:
        path: ./.keys
        state: directory

    - name: check if CA exists 
      stat: 
        path: ./.keys/ca-config.json
      register: ca_authority

    - name: Generate local CA authority
      shell: cd .keys ; echo '{"CN":"SENSU-CA","key":{"algo":"rsa","size":2048}}' | cfssl gencert -initca - | cfssljson -bare sensu-ca - ; echo '{"signing":{"default":{"expiry":"43800h","usages":["signing","key encipherment","server auth","client auth"]}}}' > ca-config.json
      when: ca_authority.stat.exists==false

    - name : Generate etcd client cert
      environment:
        NAME: "client"
      shell:  cd .keys; echo '{"CN":"'$NAME'","hosts":[""],"key":{"algo":"rsa","size":2048}}' | cfssl gencert -config=ca-config.json -ca=sensu-ca.pem -ca-key=sensu-ca-key.pem -hostname="" -profile=client - | cfssljson -bare $NAME
    - name : Generate etcd agent cert
      environment:
        NAME: "agent"
      shell:  cd .keys; echo '{"CN":"'$NAME'","hosts":[""],"key":{"algo":"rsa","size":2048}}' | cfssl gencert -config=ca-config.json -ca=sensu-ca.pem -ca-key=sensu-ca-key.pem -hostname="" -profile=client - | cfssljson -bare $NAME

- hosts: backends,agents
  become: true
  roles:
    - geerlingguy.ntp
      

- name: Install CA 
  hosts:  backends,agents
  become: true
  vars:
    ca_path_debian: /usr/local/share/ca-certificates
    ca_path:
      RedHat:
        6: /usr/local/share/ca-certificates
        7: /etc/pki/ca-trust/source/anchors
      Debian:
        7: '{{ ca_path_debian }}'
        8: '{{ ca_path_debian }}'

  tasks:
  - name: "Build hosts file"
    lineinfile: dest=/etc/hosts
                state=present
                dest=/etc/hosts
                regexp='.*{{ item }}$' line="{{ hostvars[item].ansible_host }} {{item}}"
    when: hostvars[item].ansible_default_ipv4.address is defined
    with_items: "{{ groups['all'] }}"

  - name: Make /etc/sensu/certs directory
    file:
      path: /etc/sensu/certs
      state: directory

  - name: install ca package on rhel systems
    yum:
      name: ca-certificates
      state: present
    when: ansible_os_family == "RedHat"

  - name: install ca package on debian systems
    apt:
      name: ca-certificates
      state: present
      update_cache: yes
    when: ansible_os_family == "Debian"

  - name: enable dynamic ca configuration on rhel6
    shell: /bin/update-ca-trust enable
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version|int == 6

  - name: copy certificate authority to trusted ca path of the os
    copy:
      src: '{{ item }}'
      dest: '{{ ca_path[ansible_os_family][ansible_distribution_major_version|int] }}/'
      owner: root
      group: root
      mode: 0644
    with_fileglob:
      - .keys/sensu-ca.pem
    notify:
      - update trusted ca debian
      - update trusted ca redhat
  
  - name: verify certificate authority
    command: "openssl verify {{ ca_path[ansible_os_family][ansible_distribution_major_version|int] }}/sensu-ca.pem"
    changed_when: false


  handlers:
  - name: update trusted ca debian
    shell: /usr/sbin/update-ca-certificates
    when: ansible_os_family == "Debian"

  - name: update trusted ca redhat
    shell: /bin/update-ca-trust
    when: ansible_os_family == "RedHat"


- name: Install, configure and run Sensu backend
  hosts: backends
  become: true

  tasks:
    - name : Set ipaddr
      set_fact: 
        ipaddr: "{{ ansible_host }}"
      when: ipaddr is undefined
    - name : Set etcd_name 
      set_fact: 
        etcd_name: "{{ inventory_hostname_short }}"
      when: etcd_name is undefined

    - name: Stop backend
      systemd:
        name: sensu-backend
        state: stopped
      ignore_errors: yes


    - name: Generate backend cert
      delegate_to: localhost
      become: false
      environment:
        ADDRESS: "{{ ipaddr }},{{ etcd_name }}"
        NAME: "{{ etcd_name }}"
      shell: cd .keys; echo '{"CN":"'$NAME'","hosts":[""],"key":{"algo":"rsa","size":2048}}' | cfssl gencert -config=ca-config.json -ca=sensu-ca.pem -ca-key=sensu-ca-key.pem -hostname="$ADDRESS" -profile=peer - | cfssljson -bare $NAME

    - name: Install backend cert
      copy:
        src: ".keys/{{ etcd_name }}.pem"
        dest: /etc/sensu/certs/
        mode: 0644
    - name: Install backend cert key
      copy:
        src: ".keys/{{ etcd_name }}-key.pem"
        dest: /etc/sensu/certs/
        mode: 0644
    - name: verify backend cert
      command: "openssl verify -CAfile /etc/pki/ca-trust/source/anchors/sensu-ca.pem /etc/sensu/certs/{{ etcd_name }}.pem"
      changed_when: false

    - name: Install etcd client cert
      copy:
        src: ".keys/client.pem"
        dest: /etc/sensu/certs/
        mode: 0644
    - name: Install etcd cert key
      copy:
        src: ".keys/client-key.pem"
        dest: /etc/sensu/certs/
        mode: 0644
    - name: verify etcd client cert
      command: "openssl verify -CAfile /etc/pki/ca-trust/source/anchors/sensu-ca.pem /etc/sensu/certs/client.pem"
      changed_when: false

    #- namie: Install etcd client cert

    - name: Install backend
      include_role:
        name: sensu.sensu_go.backend
      vars:
        version: 6.0.0
        cluster_admin_username: cluster
        cluster_admin_password: my.password  # USE VAULT IN REAL SCENARIOS!!!
        backend_config:
          log-level: info
          ##
          # Embedded Ectd Cluster Configuration: Install-time settings  
          ##
          etcd-name: "{{ etcd_name }}"
          etcd-initial-advertise-peer-urls: "https://{{ ipaddr }}:2380"
          etcd-listen-peer-urls: "https://0.0.0.0:2380"
          etcd-initial-cluster: "sensu-cluster0=https://192.168.50.20:2380,sensu-cluster1=https://192.168.50.21:2380,sensu-cluster2=https://192.168.50.22:2380"
          etcd-initial-cluster-token: ""
          etcd-initial-cluster-state: "new"

          ##
          # Etcd Peer Connection Settings: Cane be changed after install
          ##
          etcd-peer-cert-file: "/etc/sensu/certs/{{ etcd_name }}.pem"
          etcd-peer-key-file: "/etc/sensu/certs/{{ etcd_name }}-key.pem"
          etcd-peer-trusted-ca-file: "/etc/pki/ca-trust/source/anchors/sensu-ca.pem"

          ##
          # Etcd Client Connection Settings: Can be changed after install
          ##
          etcd-cert-file: "/etc/sensu/certs/{{ etcd_name }}.pem"
          etcd-key-file: "/etc/sensu/certs/{{ etcd_name }}-key.pem"
          etcd-trusted-ca-file: "/etc/pki/ca-trust/source/anchors/sensu-ca.pem"
          etcd-advertise-client-urls: "https://{{ ipaddr }}:2379"
          etcd-listen-client-urls: "https://0.0.0.0:2379"

          ##
          # Etcd client Cert Auth Settings: Can be changed after install
          ##
          etcd-peer-client-cert-auth: "true"
          etcd-client-cert-auth: "true"

          ##
          # API Security Settings: Can be changed after install
          # 
          # Note: impacts sensuctl and agent configuration
          # api port will now use https://
          # agent websocket port will use wss://
          ##
          cert-file: "/etc/sensu/certs/{{ etcd_name }}.pem"
          key-file: "/etc/sensu/certs/{{ etcd_name }}-key.pem"
          trusted-ca-file: "/etc/pki/ca-trust/source/anchors/sensu-ca.pem"
          ##
          # Require client certs to be verified: Can be changed after install
          #   Note: If using self signed certs must make sure your clients use custom CA when true
          ## 
          insecure-skip-tls-verify: false

          ##
          # Agent Security Settings: Can be changed after install
          # If set use for agent websocket communication
          # if not set, uses cert-file,key-file,trusted-ca-file as fallback
          ##
          #agent-auth-cert-file: "/etc/sensu/certs/agent.pem"
          #agent-auth-key-file: "/etc/sensu/certs/agent-key.pem"
          #agent-auth-trusted-ca-file: "/etc/pki/ca-trust/source/anchors/sensu-ca.pem"


