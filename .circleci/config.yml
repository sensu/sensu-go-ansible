version: "2.1"

workflows:
  version: 2
  main_workflow:
    jobs:
      - sanity
      - unit_python27_ansible29
      - unit_python35_ansible29
      - unit_python36_ansible29
      - unit_python37_ansible29

      - integration_ansible29_git:
          requires: &reqs
            - sanity
            - unit_python27_ansible29
            - unit_python35_ansible29
            - unit_python36_ansible29
            - unit_python37_ansible29

      - integration_ansible29_galaxy:
          filters: { branches: { only: [ stable ] } }
          requires: *reqs

  daily_master:
    triggers:
      - schedule:
          cron: "12 4 * * *"
          filters: { branches: { only: [ master ] } }
    jobs:
      - integration_ansible29_git

  daily_released:
    triggers:
      - schedule:
          cron: "12 5 * * *"
          filters: { branches: { only: [ stable ] } }
    jobs:
      - integration_ansible29_galaxy

# A list of all supported python versions.
executors:
  python27:
    docker: [ { image: circleci/python@sha256:2b69a7f724876064deefa78b41e6b03d4ea7e3083fdb3a8268fec9754158427f } ]
    working_directory: &wd ~/ansible_collections/sensu/sensu_go

  python35:
    docker: [ { image: circleci/python@sha256:ce95d2f82fb2a4d2ec9f79a17ead2e8bba65da3bb1e3c4f339fb0deb9c1a1816 } ]
    working_directory: *wd

  python36:
    docker: [ { image: circleci/python@sha256:11d3c6f85e08bb1f04ccb20f6d41540e3cfcf2d034472847d52989cd1c135426 } ]
    working_directory: *wd

  python37:
    docker: [ { image: circleci/python@sha256:d1d382680cdb007ed058eabf05b5be158c504a96ea6f843899f50be74cce678c } ]
    working_directory: *wd

# Matrix of tests that we run. At the moment, the only supported Ansible is
# 2.9 because previous versions do not install ansible-test executable.
jobs:
  # Sanity test is not python-dependent and should be always run with the
  # latest supported, stable python and with latest stable Ansible.
  sanity:
    executor: python37
    environment:
      ANSIBLE_VERSION: &ansible29 ==2.9.*
      TEST_KIND: sanity
    steps: [ sanity_test ]

  # Unit tests run on all supported python and Ansible versions.
  unit_python27_ansible29:
    executor: python27
    environment:
      ANSIBLE_VERSION: *ansible29
      TEST_KIND: units
    steps: [ unit_test ]

  unit_python35_ansible29:
    executor: python35
    environment:
      ANSIBLE_VERSION: *ansible29
      TEST_KIND: units
    steps: [ unit_test ]

  unit_python36_ansible29:
    executor: python36
    environment:
      ANSIBLE_VERSION: *ansible29
      TEST_KIND: units
    steps: [ unit_test ]

  unit_python37_ansible29:
    executor: python37
    environment:
      ANSIBLE_VERSION: *ansible29
      TEST_KIND: units
    steps: [ unit_test ]

  # Integration tests run on single python version, because python portability
  # is checked by sanity and unit tests.
  integration_ansible29_git:
    executor: python37
    environment:
      ANSIBLE_VERSION: *ansible29
      TEST_KIND: integration
    parallelism: 4
    steps: [ integration_test_git ]

  integration_ansible29_galaxy:
    executor: python37
    environment:
      ANSIBLE_VERSION: *ansible29
      TEST_KIND: integration
    parallelism: 4
    steps: [ integration_test_galaxy ]

commands:
  # Composite commands (parametrized jobs)
  sanity_test:
    description: Run sanity tests
    steps:
      - common_setup
      - run_test

  unit_test:
    description: Run unit tests
    steps:
      - common_setup
      - run_test
      - store_artifacts:
          path: tests/output/reports/coverage
          destination: coverage-report
      - store_test_results:
          path: tests/output/junit

  integration_test_git:
    description: Run integration tests on git collection
    steps:
      - common_setup
      - setup_remote_docker
      - run_test

  integration_test_galaxy:
    description: Run integration tests on galaxy collection
    steps:
      - common_setup
      - setup_remote_docker
      - install_galaxy_collection
      - run_test

  # Lower-level command implementations
  common_setup:
    description: Common steps for all jobs
    steps:
      - checkout: { path: . }
      - run:
          name: Create virtual environment
          command: virtualenv ${HOME}/venv
      - run:
          name: Activate virtualenv
          command: |
            echo 'export PATH=${HOME}/venv/bin:$PATH' >> $BASH_ENV
      - run:
          name: Install Ansible
          command: pip install "ansible${ANSIBLE_VERSION}"

  install_galaxy_collection:
    description: Install sensu_go collection from Ansible Galaxy
    steps:
      - run:
          name: Set ANSIBLE_COLLECTIONS_PATHS
          command: >
            echo 'export ANSIBLE_COLLECTIONS_PATHS=${HOME}/.ansible/collections' >> $BASH_ENV
      - run:
          name: Install sensu_go collection
          command: |
            ansible-galaxy collection install \
              sensu.sensu_go:$(grep version: galaxy.yml | cut -d" " -f2)

  run_test:
    description: Run selected test kind
    steps:
      - run:
          name: Install requirements
          command: pip install -r ${TEST_KIND}.requirements
      - run:
          name: Run test
          command: make ${TEST_KIND}
