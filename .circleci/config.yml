version: "2.1"

workflows:
  version: 2
  main_workflow:
    jobs:
      - sanity_test:
          matrix:
            parameters:
              # python parameter is a circleci/python image tag
              python: [ "2.7", "3.6", "3.7", "3.8" ]
              # ansible is PyPI version specification for Ansible
              ansible: [ "2.9.*", "2.10.*" ]

      - unit_test:
          matrix:
            parameters:
              # python parameter is a circleci/python image tag
              python: [ "2.7", "3.6", "3.7", "3.8" ]
              # ansible is PyPI version specification for Ansible
              ansible: [ "2.9.*", "2.10.*" ]

      - integration_test_git:
          requires:
            - sanity_test
            - unit_test
          matrix:
            parameters:
              # ansible is PyPI version specification for Ansible
              ansible: [ "2.9.*", "2.10.*" ]

      - integration_test_galaxy:
          filters: { branches: { only: [ stable ] } }
          requires:
            - integration_test_git
          matrix:
            parameters:
              # ansible is PyPI version specification for Ansible
              ansible: [ "2.9.*", "2.10.*" ]

  daily_master:
    triggers:
      - schedule:
          cron: "12 4 * * *"
          filters: { branches: { only: [ master ] } }
    jobs:
      - integration_test_git:
          matrix:
            parameters:
              # ansible is PyPI version specification for Ansible
              ansible: [ "2.9.*", "2.10.*" ]

  daily_released:
    triggers:
      - schedule:
          cron: "12 5 * * *"
          filters: { branches: { only: [ stable ] } }
    jobs:
      - integration_test_galaxy:
          matrix:
            parameters:
              # ansible is PyPI version specification for Ansible
              ansible: [ "2.9.*", "2.10.*" ]

jobs:
  sanity_test:
    parameters:
      python:
        description: Python docker image tag
        type: string
      ansible:
        description: Ansible version to use
        type: string
    docker:
      - image: "circleci/python:<< parameters.python >>"
    working_directory: ~/ansible_collections/sensu/sensu_go
    steps:
      - wrapper:
          python: << parameters.python >>
          ansible: << parameters.ansible >>
          kind: sanity
          test_commands:
            - run: make sanity

  unit_test:
    parameters:
      python:
        description: Python docker image tag
        type: string
      ansible:
        description: Ansible version to use
        type: string
    docker:
      - image: "circleci/python:<< parameters.python >>"
    working_directory: ~/ansible_collections/sensu/sensu_go
    steps:
      - wrapper:
          python: << parameters.python >>
          ansible: << parameters.ansible >>
          kind: sanity
          test_commands:
            - run: make units
            - store_artifacts:
                path: tests/output/reports/coverage
                destination: coverage-report
            - store_test_results:
                path: tests/output/junit

  integration_test_git:
    parallelism: 6
    parameters:
      ansible:
        description: Ansible version to use
        type: string
    machine:
      image: ubuntu-2004:202010-01
    working_directory: ~/ansible_collections/sensu/sensu_go
    steps:
      - wrapper:
          python: "3.8"
          ansible: << parameters.ansible >>
          kind: integration
          venv_cmd: python3 -m venv
          test_commands:
            - run:
                name: Display scheduled scenarios
                command: |
                  circleci tests glob "tests/integration/molecule/*/molecule.yml" \
                   | circleci tests split --split-by=timings
            - run: make integration_ci
            - store_test_results:
                path: test_results
            - store_artifacts:
                path: test_results

  integration_test_galaxy:
    parallelism: 6
    parameters:
      ansible:
        description: Ansible version to use
        type: string
    machine:
      image: ubuntu-2004:202010-01
    working_directory: ~/sensu_go
    steps:
      - wrapper:
          python: "3.8"
          ansible: << parameters.ansible >>
          kind: integration
          venv_cmd: python3 -m venv
          test_commands:
            - run: |
                ansible-galaxy collection install \
                  sensu.sensu_go:$(grep version: galaxy.yml | cut -d" " -f2)
            - run:
                name: Display scheduled scenarios
                command: |
                  circleci tests glob "tests/integration/molecule/*/molecule.yml" \
                   | circleci tests split --split-by=timings
            - run: make integration_ci
            - store_test_results:
                path: test_results
            - store_artifacts:
                path: test_results

commands:
  wrapper:
    description: Wrapper command that takes care of venv caching
    parameters:
      python:
        description: Python version (used for cache restore)
        type: string
      ansible:
        description: Ansible version to install
        type: string
      kind:
        description: Test kind (used to construct cache name)
        type: string
      test_commands:
        description: Test commands to execute
        type: steps
      venv_cmd:
        description: Virtual environment creation command
        type: string
        default: virtualenv
    steps:
      - checkout: { path: . }
      - run:
          name: Generate cache id file
          command: |
            rm -f cache-id.txt
            echo "week $(date +%V)" >> cache-id.txt
            echo "python << parameters.python >>" >> cache-id.txt
            echo "ansible << parameters.ansible >>" >> cache-id.txt
            echo "kind << parameters.kind >>" >> cache-id.txt
            echo "venv_cmd << parameters.venv_cmd >>" >> cache-id.txt
            echo "cache busting string 1" >> cache-id.txt
      - restore_cache:
          key: '{{ checksum "cache-id.txt" }}'
      - run:
          name: Create virtual environment
          command: << parameters.venv_cmd >> ${HOME}/venv
      - run:
          name: Activate virtualenv
          command: |
            echo 'export PATH=${HOME}/venv/bin:$PATH' >> $BASH_ENV
      - run:
          name: Install Ansible
          command: pip install -U "ansible==<< parameters.ansible >>"
      - steps: << parameters.test_commands >>
      - save_cache:
          key: '{{ checksum "cache-id.txt" }}'
          paths:
            - "~/venv"
