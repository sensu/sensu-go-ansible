---
- name: Converge
  collections:
    - sensu.sensu_go
  hosts: all
  gather_facts: no
  tasks:
    - name: Create a cluster role binding with missing required parameters
      cluster_role_binding:
        auth:
          url: http://localhost:8080
        name: test_cluster_role_binding
      ignore_errors: true
      register: result

    - assert:
        that:
          - result is failed
          - "result.msg == 'state is present but all of the following are missing: cluster_role'"

    - name: Create a cluster role binding without providing users or groups
      cluster_role_binding:
        auth:
          url: http://localhost:8080
        name: test_cluster_role_binding
        cluster_role: test_cluster_role
      ignore_errors: true
      register: result

    - assert:
        that:
          - result is failed
          - "result.msg == 'missing required parameters: users or groups'"

    - name: Create a cluster role binding with minimal parameters (users only)
      cluster_role_binding:
        auth:
          url: http://localhost:8080
        name: minimal_test_cluster_role_binding_users
        cluster_role: test_cluster_role
        users:
          - test_user
      register: result

    - assert:
        that:
          - result is changed
          - result.object.metadata.name == 'minimal_test_cluster_role_binding_users'
          - result.object.role_ref.name == 'test_cluster_role'
          - result.object.subjects | length == 1
          - result.object.subjects.0.name == 'test_user'
          - result.object.subjects.0.type == 'User'

    - name: Create a cluster role binding with minimal parameters (groups only)
      cluster_role_binding:
        auth:
          url: http://localhost:8080
        name: minimal_test_cluster_role_binding_groups
        cluster_role: test_cluster_role
        groups:
          - test_group_1
          - test_group_2
      register: result

    - assert:
        that:
          - result is changed
          - result.object.metadata.name == 'minimal_test_cluster_role_binding_groups'
          - result.object.role_ref.name == 'test_cluster_role'
          - result.object.subjects | length == 2

    - name: Check idempotence of cluster role binding creation with minimal parameters
      cluster_role_binding:
        auth:
          url: http://localhost:8080
        name: minimal_test_cluster_role_binding_groups
        cluster_role: test_cluster_role
        groups:
          - test_group_2
          - test_group_1
      register: result

    - assert:
        that: result is not changed

    - name: Create a cluster role binding
      cluster_role_binding:
        auth:
          url: http://localhost:8080
        name: test_cluster_role_binding
        cluster_role: test_cluster_role
        users:
          - test_user_1
          - test_user_2
        groups:
          - test_group_1
          - test_group_2
      register: result

    - assert:
        that:
          - result is changed
          - result.object.metadata.name == 'test_cluster_role_binding'
          - result.object.role_ref.name == 'test_cluster_role'
          - result.object.subjects | length == 4

    - name: Check idempotence of cluster role binding creation
      cluster_role_binding:
        auth:
          url: http://localhost:8080
        name: test_cluster_role_binding
        cluster_role: test_cluster_role
        users:
          - test_user_2
          - test_user_1
        groups:
          - test_group_2
          - test_group_1
      register: result

    - assert:
        that:
          - result is not changed

    - name: Modify a cluster role binding
      cluster_role_binding:
        auth:
          url: http://localhost:8080
        name: test_cluster_role_binding
        cluster_role: another_cluster_role
        users:
        groups:
          - group_1
      register: result

    - assert:
        that:
          - result is changed
          - result.object.metadata.name == 'test_cluster_role_binding'
          - result.object.role_ref.name == 'another_cluster_role'
          - result.object.subjects | length == 1
          - result.object.subjects.0.name == 'group_1'
          - result.object.subjects.0.type == 'Group'

    - name: Fetch all cluster role bindings
      cluster_role_binding_info:
        auth:
          url: http://localhost:8080
      register: result

    - assert:
        that:
          - result.objects | length == 6 # There are 3 pre-existing cluster role bindings by default

    - name: Fetch a specific cluster role binding
      cluster_role_binding_info:
        auth:
          url: http://localhost:8080
        name: test_cluster_role_binding
      register: result

    - assert:
        that:
          - result.objects | length == 1
          - result.objects.0.metadata.name == 'test_cluster_role_binding'

    - name: Delete a cluster role binding
      cluster_role_binding:
        auth:
          url: http://localhost:8080
        state: absent
        name: test_cluster_role_binding
      register: result

    - name: Fetch all cluster roles bindings after deletion
      cluster_role_binding_info:
        auth:
          url: http://localhost:8080
      register: result

    - assert:
        that:
          - result.objects | length == 5 # There are 3 pre-existing cluster role bindings by default

    - name: Try to fetch non-existing binding
      cluster_role_binding_info:
        auth:
          url: http://localhost:8080
        name: bad-bad-binding
      register: result

    - assert:
        that:
          - result.objects == []
