---
- name: Converge
  collections:
    - sensu.sensu_go
  hosts: all
  gather_facts: no
  tasks:
    - name: Create a check with missing required parameters
      check:
        auth:
          url: http://localhost:8080
        name: minimal_check
      ignore_errors: true
      register: result

    - assert:
        that:
          - result is failed
          - "result.msg == 'state is present but all of the following are missing: subscriptions, command'"


    - name: Create a check with minimal parameters
      check:
        auth:
          url: http://localhost:8080
        name: minimal_check
        command: /bin/true
        subscriptions:
          - checks
          - also_checks
        interval: 30
      register: result

    - assert:
        that:
          - result is changed
          - result.object.metadata.name == 'minimal_check'

    - name: Create a check with minimal parameters idempotence
      check:
        auth:
          url: http://localhost:8080
        name: minimal_check
        command: /bin/true
        subscriptions:
          - checks
          - also_checks
        interval: 30
      register: result

    - assert:
        that: result is not changed

    - name: Create a check
      check: &check
        auth:
          url: http://localhost:8080
        name: check
        command: /bin/true
        subscriptions:
          - checks
          - also_checks
        handlers:
          - default
          - not_default
        interval: 30
        publish: True
        timeout: 30
        ttl: 100
        stdin: False
        low_flap_threshold: 20
        high_flap_threshold: 60
        proxy_entity_name: switch-dc-01
        proxy_requests:
          entity_attributes: ['entity.entity_class == "proxy"']
          splay: True
          splay_coverage: 90
        output_metric_format: nagios_perfdata
        output_metric_handlers: ['influx-db']
        round_robin: True
        env_vars:
          foo: bar
        runtime_assets: awesomeness
        secrets:
          - name: test
            secret: value
      register: result

    - assert:
        that:
          - result is changed
          - result.object.metadata.name == 'check'
          - "result.object.secrets == [{'name': 'test', 'secret': 'value'}]"

    - name: Test check creation idempotence
      check: *check
      register: result

    - assert:
        that: result is not changed

    - name: Modify a check
      check:
        auth:
          url: http://localhost:8080
        name: check
        interval: 30
        command: /bin/true
        subscriptions:
          - checks
      register: result

    - assert:
        that:
          - result is changed
          - not result.object.handlers
          - not result.object.env_vars
          - not result.object.runtime_assets
          - "'also_checks' not in result.object.subscriptions"

    - name: Create a second check
      check:
        auth:
          url: http://localhost:8080
        name: check2
        interval: 30
        command: /usr/bin/true
        subscriptions: checks
        handlers: default

    - name: Fetch all checks
      check_info:
        auth:
          url: http://localhost:8080

    - name: Fetch a specific check
      check_info:
        auth:
          url: http://localhost:8080
        name: check
      register: result

    - assert:
        that:
          - result.objects | length == 1
          - result.objects.0.metadata.name == 'check'

    - name: Delete a check
      check:
        auth:
          url: http://localhost:8080
        name: check
        state: absent

    - name: Get all checks
      check_info:
        auth:
          url: http://localhost:8080
      register: result

    - assert:
        that:
          - result.objects | length == 2
          - result.objects.0.metadata.name == 'check2'

    - name: Try to fetch non-existing check
      check_info:
        auth:
          url: http://localhost:8080
        name: bad-bad-check
      register: result

    - assert:
        that:
          - result.objects == []

    - name: Create check for idempotency test of complex fields
      check:
        name: complex
        command: sleep 10
        interval: 10
        subscriptions:
          - sub1
          - sub2
        handlers: []
        proxy_requests:
          entity_attributes:
            - "entity.entity_class == 'proxy'"
            - "entity.entity_class == 'demo'"
        check_hooks:
          warning:
            - h1
            - h2
            - h3
          error:
            - h4
            - h2
        env_vars:
          var1: val1
          var2: val2

    - name: Test for idempotency test of complex fields
      check:
        name: complex
        command: sleep 10
        interval: 10
        subscriptions:
          - sub2
          - sub1
        runtime_assets: []
        proxy_requests:
          entity_attributes:
            - "entity.entity_class == 'demo'"
            - "entity.entity_class == 'proxy'"
        check_hooks:
          warning:
            - h1
            - h3
            - h2
          error:
            - h2
            - h4
        env_vars:
          var2: val2
          var1: val1
      register: result

    - assert:
        that:
          - result is not changed
