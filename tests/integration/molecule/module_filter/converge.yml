---
- name: Converge
  collections:
    - sensu.sensu_go
  hosts: all
  gather_facts: false
  tasks:
    - name: Create filter with missing required parameters
      filter:
        auth:
          url: http://localhost:8080
        name: filter
      ignore_errors: true
      register: result

    - assert:
        that:
          - result is failed
          - "result.msg == 'state is present but all of the following are missing: action, expressions'"

    - name: Create filter with minimal parameters
      filter:
        auth:
          url: http://localhost:8080
        name: minimal_filter
        action: allow
        expressions:
          - event.check.occurrences == 1
      register: result

    - assert:
        that:
          - result is changed
          - result.object.action == 'allow'
          - result.object.expressions == ['event.check.occurrences == 1']
          - result.object.metadata.name == 'minimal_filter'

    - name: Create filter with minimal parameters idempotence
      filter:
        auth:
          url: http://localhost:8080
        name: minimal_filter
        action: allow
        expressions:
          - event.check.occurences == 1
      register: result

    - name: Create a filter
      filter:
        auth:
          url: http://localhost:8080
        name: filter
        action: deny
        expressions:
          - event.check.interval == 10
          - event.check.occurrences == 1
        runtime_assets: awesomeness
      register: result

    - assert:
        that:
          - result is changed
          - result.object.action == 'deny'
          - result.object.expressions == ['event.check.interval == 10', 'event.check.occurrences == 1']
          - result.object.runtime_assets == ['awesomeness']
          - result.object.metadata.name == 'filter'

    - name: Test filter creation idempotence
      filter:
        auth:
          url: http://localhost:8080
        name: filter
        action: deny
        expressions:
          - event.check.interval == 10
          - event.check.occurrences == 1
        runtime_assets: awesomeness
      register: result

    - assert:
        that: result is not changed

    - name: Create a second filter
      filter:
        auth:
          url: http://localhost:8080
        name: filter2
        action: allow
        expressions: event.check.interval == 10

    - name: Fetch all filters
      filter_info:
        auth:
          url: http://localhost:8080

    - name: Fetch a specific filter
      filter_info:
        auth:
          url: http://localhost:8080
        name: filter
      register: result

    - assert:
        that:
          - result.objects | length == 1
          - result.objects.0.metadata.name == 'filter'

    - name: Modify a filter
      filter:
        auth:
          url: http://localhost:8080
        name: filter
        action: deny
        expressions: event.check.interval > 10
      register: result

    - assert:
        that:
          - result is changed
          - result.object.expressions == ['event.check.interval > 10']
          - not result.object.runtime_assets

    - name: Delete a filter
      filter:
        auth:
          url: http://localhost:8080
        name: filter
        state: absent

    - name: Get all filters
      filter_info:
        auth:
          url: http://localhost:8080
      register: result

    - assert:
        that:
          - result.objects | length == 2
          - result.objects.0.metadata.name == 'filter2'

    - name: Try to fetch non-existing filter
      filter_info:
        auth:
          url: http://localhost:8080
        name: bad-bad-filter
      register: result

    - assert:
        that:
          - result.objects == []
